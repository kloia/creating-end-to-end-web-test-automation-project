pipeline {
    agent any
        parameters {      
        choice(name: 'Headless', choices: ['true', 'false'], description: '')
        choice(name: 'Browser', choices: ['remote-chrome', 'remote-firefox'], description: '')
        string(name: 'ThreadCount', defaultValue: '1', description: '')
        string(name: 'Retry', defaultValue: '1', description: '')
            gitParameter name: 'BRANCH_TAG',
                        type: 'PT_BRANCH',
                        defaultValue: 'master',
                        selectedValue: 'DEFAULT',
                        quickFilterEnabled: true,
                        sortMode: 'DESCENDING_SMART',
                        tagFilter: '*',
                        branchFilter: 'origin/(.*)',
                        useRepository: '.*.git',
                        description: 'Select your branch'
    }
    stages {
        stage('Checkout & Run Tests') {
            steps {
                sh "docker run muhammettopcu/dockerize-ruby-web:latest git checkout ${params.BRANCH_TAG} && parallel_cucumber -n ${params.ThreadCount.toInteger()} -o 'headless=${Headless} browser=${Browser} --retry ${params.Retry.toInteger()}'"
            }
        }
    }
    post {
        always {
            cucumber([
                buildStatus: 'null', 
                customCssFiles: '', 
                customJsFiles: '', 
                failedFeaturesNumber: -1, 
                failedScenariosNumber: -1, 
                failedStepsNumber: -1, 
                fileIncludePattern: '**/*.json',
                jsonReportDirectory: 'reports', 
                pendingStepsNumber: -1, 
                reportTitle: 'Cucumber Report', 
                skippedStepsNumber: -1, 
                sortingMethod: 'ALPHABETICAL', 
                undefinedStepsNumber: -1
            ])
        }
        success{
            script{
                sh "echo successful"
           }
        }
        failure{
            script{
                sh "echo failed"
           }
        }
        aborted{
            script{
                sh "echo aborted"
            }
        }
    }
}